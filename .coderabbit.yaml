# .coderabbit.yaml - Next.js 14.2.26 + TypeScript 환경용 Coderabbit 설정
reviews:
  # 기본 설정
  request_changes_threshold: major  # 변경 요청 기준 (minor, major, critical)
  enable_review_guidance: true      # 리뷰 지침 활성화
  auto_review: true                 # PR 생성/수정 시 자동 리뷰
  depth: high                       # 리뷰 깊이: high, medium, low 중 선택
  
  # 언어 및 프레임워크 설정
  language:
    - typescript
    - javascript
    - css
    - html
  
  framework:
    - nextjs
  
  # 파일 필터링
  path_filters:
    - "src/**"                      # src 디렉토리 모든 파일 포함
    - "pages/**"                    # Next.js pages 디렉토리
    - "app/**"                      # Next.js app 디렉토리 (App Router)
    - "components/**"               # 컴포넌트 디렉토리
    - "lib/**"                      # 라이브러리 디렉토리
    - "utils/**"                    # 유틸리티 디렉토리
    - "hooks/**"                    # 커스텀 훅 디렉토리
    - "store/**"                    # Zustand 스토어 디렉토리
    - "types/**"                    # 타입 정의 디렉토리
    - "**/*.{ts,tsx,js,jsx}"        # TypeScript/JavaScript 파일
    - "!node_modules/**"            # node_modules 제외
    - "!.next/**"                   # .next 디렉토리 제외
    - "!public/**"                  # public 디렉토리 제외
  
  # 경로별 특수 지침
  path_instructions:
    - path: "components/**"
      instructions: |
        컴포넌트 검토 기준:
        1. 재사용성, 유지보수성, 성능 고려
        2. 컴포넌트 분리 및 책임 분리 적절성
        3. shadcn UI 컴포넌트 사용시 가이드라인 준수
        4. 화살표 함수 사용 및 export default 위치 확인 (맨 아래 위치)
        5. Props 타입 명확히 정의
        6. TS Doc 주석 적절성
    
    - path: "pages/**"
      instructions: |
        Next.js 페이지 컴포넌트 규칙 준수:
        1. getServerSideProps, getStaticProps 등 데이터 페칭 함수 사용의 적절성
        2. SEO 관련 설정 (Head, title 등)
        3. 화살표 함수 사용 및 export default 위치 확인 (맨 아래 위치)
        4. 성능 최적화 (불필요한 리렌더링 방지)
    
    - path: "app/**"
      instructions: |
        Next.js 14 App Router 규칙 준수:
        1. Server Component와 Client Component 구분 적절성
        2. 데이터 페칭 패턴 (fetch 함수, React Server Component)
        3. 성능 최적화 (Suspense, 스트리밍)
        4. 병렬 라우트, 인터셉트 라우트 사용 적절성
    
    - path: "store/**"
      instructions: |
        Zustand 스토어 검토 기준:
        1. 스토어 구조의 적절성
        2. 액션과 상태 관리 명확성
        3. 불필요한 리렌더링 방지 패턴 적용
        4. TypeScript와의 통합 (타입 안전성)
        5. 필요한 경우 미들웨어 사용 적절성
    
    - path: "lib/supabase/**"
      instructions: |
        Supabase 관련 코드 검토:
        1. 보안 모범 사례 준수
        2. 에러 처리 적절성
        3. 타입 안전성 확보
        4. 퍼포먼스 최적화
    
    - path: "**/*.test.{ts,tsx}"
      instructions: |
        테스트 코드 검토:
        1. 테스트 범위의 적절성
        2. 테스트 케이스 명확성
        3. 모킹 사용의 적절성
  
  # 기술 스택 명시
  technology_map:
    - name: "nextjs"
      version: "14.2.26"  # 선호하는 Next.js 버전
    - name: "typescript"
    - name: "react"
    - name: "zustand"     # 상태 관리
    - name: "supabase"    # 백엔드
    - name: "react-hook-form"  # 폼 상태 관리
    - name: "zod"         # 스키마 검증
    - name: "shadcn-ui"   # UI 컴포넌트
    - name: "tanstack-query"  # 데이터 페칭/캐싱
  
  # 코드 스타일 설정
  style:
    typescript:
      prefer_arrow_functions: true   # 화살표 함수 선호
      export_style: "bottom"         # export default를 파일 하단에 위치
      
    naming:
      components: "PascalCase"       # 컴포넌트 이름 규칙
      functions: "camelCase"         # 함수 이름 규칙
      variables: "camelCase"         # 변수 이름 규칙
      interfaces: "PascalCase"       # 인터페이스 이름 규칙
      types: "PascalCase"            # 타입 이름 규칙
      
  # TS Doc 관련 설정  
  documentation:
    require_ts_doc: true            # TS Doc 요구
    ts_doc_required_for:
      - "functions"                 # 함수에 TS Doc 필요
      - "interfaces"                # 인터페이스에 TS Doc 필요
      - "classes"                   # 클래스에 TS Doc 필요
      - "type_aliases"              # 타입 별칭에 TS Doc 필요
      
  # 무시할 패턴
  ignore:
    - "**/*.d.ts"                   # 타입 선언 파일 무시
    - "**/*.config.js"              # 설정 파일 무시
    - "**/*.config.ts"              # TypeScript 설정 파일 무시
    - "package.json"                # package.json 무시
    - "package-lock.json"           # package-lock.json 무시
    - "yarn.lock"                   # yarn.lock 무시
    - "pnpm-lock.yaml"              # pnpm-lock.yaml 무시
    - ".eslintrc.*"                 # ESLint 설정 무시
    - "tsconfig.json"               # TypeScript 설정 무시
    - ".prettierrc.*"               # Prettier 설정 무시
    - "next.config.*"               # Next.js 설정 무시

# AI 프롬프트 설정
prompts:
  default: |
    당신은 Next.js 14.2.26, TypeScript, zustand, supabase, react-hook-form, zod, shadcn ui, tanstack query에 전문성을 가진 리뷰어입니다.
    
    코드 리뷰 시 다음 사항을 중점적으로 확인하세요:
    1. TypeScript 타입 안정성 및 타입 정의의 명확성
    2. Next.js 14의 모범 사례 준수 (특히 App Router 사용 시)
    3. 화살표 함수 사용 및 export default 위치가 파일 하단인지 확인
    4. 컴포넌트 분리와 재사용성
    5. Zustand 스토어 구조와 상태 관리 패턴
    6. Supabase 클라이언트 사용의 안전성
    7. React-hook-form과 Zod를 사용한 폼 검증 적절성
    8. Tanstack Query를 활용한 데이터 페칭 최적화
    9. Shadcn UI 컴포넌트 사용 패턴
    10. 필요한 부분에 TS Doc 주석이 적절히 작성되었는지 확인
    
    명확한 개선 제안과 함께 코드 예시를 제공하되, 코드 스타일에 관한 개인 취향은 강요하지 마세요.
    중요한 이슈는 명확하게 표시하고, 사소한 개선 사항은 제안으로 표시하세요.

# 알림 설정 (선택 사항)
notifications:
  slack: false     # Slack 알림 비활성화
  email: true      # 이메일 알림 활성화

# PR 설명 템플릿 제안 (선택 사항)
pr_description_template: |
  ## 변경 사항
  <!-- 이 PR에서 수정한 내용을 간략히 설명해주세요 -->
  
  ## 테스트 방법
  <!-- 이 변경 사항을 테스트하는 방법을 설명해주세요 -->
  
  ## 스크린샷
  <!-- 필요한 경우 스크린샷을 첨부해주세요 -->
  
  ## 체크리스트
  - [ ] 타입 안정성 확인
  - [ ] 테스트 코드 작성/수정
  - [ ] 문서 업데이트
  - [ ] 코드 스타일 가이드 준수
